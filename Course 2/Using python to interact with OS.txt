Course 2 Using python to interact with operating system

if we do not want to write python3 every time,

we can type the following line at 1st line of the file

#!/usr/bin/env python3   --> this is known as shebang line

---------------------------------------------------------------------------
if you need the interpreter to recognize the directory as module then use init.py file in it

------------------------------------------------
some IDEs --> atom <filename.py>

-------------------------------------------------
we can use shutil to check the disk storage 
>>> import shutil
>>> du = shutil.disk_usage("/")
>>> print(du)
usage(total=317305384960, used=272946409472, free=44358975488)

>>> du.free/du.total*100
13.979899992429049

To check CPU usage  ->
cpu_percent -> psutil

>>> import psutil
>>> psutil.cpu_percent(0.1)
7.1
>>> psutil.cpu_percent(0.1)
44.0
>>> psutil.cpu_percent(0.1)
8.0
>>> psutil.cpu_percent(0.1)
8.0
>>>
>>> psutil.cpu_percent(0.1)
3.8
>>>

------------------------------------------------------------------
Writing a health checking script

check the file Python_script_for_healthcheck.py

--------------------------------------------------------------------
File Discriptor

Right on! Both methods read from the current position. The readline() method reads one line, while read() reads until the end of the file.


A token, generated by the OS, that allows programs to do more operations with file

file = open("hooman.txt")
print(file.readline())    -> this will print the first line
print(file.readline()) -> second line

print(file.read()) -> this will print all the remaining lines

file.close()

-----------------------------------------================================================
creting a script to close the files using python -> "with" keyword

example of use of with ->
file.close()
with open("spider.txt") as file:
	print(file.readline())
	
Note - when we use 'with', python automatically closes the file

--------------------------------------------------------------------------------------
Iterating through file

with open("spider.txt") as file:
    for line in file:
        print(line.upper())

below code is for getting output without extra new line

with open("spider.txt") as file:
    for line in file:
        print(line.strip().upper())


>>> with open("text.txt") as file:
...     for file in file:
...             print(file.strip().upper())
...
HERE THIS IS LINE 1
THIS IS THE WAY! -> THIS IS LINE 2
HERE I AM LINE 3
NOW THIS IS LINE 4

---------------------------------------------------------------------
opening the file for writing
-> if you open a  file for writing and the file already exists, the old contents will be deleted as soon as the filei is opened.

with open("novel.txt", "w") as file:
    file.write("It was a dark and stormy night")

-----------------------------------------------------------------------

“r”  open for reading (default)

“w”  open for writing, truncating the file first

“x”  open for exclusive creation, failing if the file already exists

“a”  open for writing, appending to the end of the file if it exists

“+”  open for both reading and writing

----------------------------------------------------------------------------
adding 

new_guests = ["Sam", "Danielle", "Jacob"]

with open("guests.txt", "a") as guests:
    for i in new_guests:
        guests.write(i + "\n")

guests.close()


with open("guests.txt") as guests:
    for line in guests:
        print(line)
		
-------------------------------------------------------------------
removing 

checked_out=["Andrea", "Manuel", "Khalid"]
temp_list=[]

with open("guests.txt", "r") as guests:
    for g in guests:
        temp_list.append(g.strip())

with open("guests.txt", "w") as guests:
    for name in temp_list:
        if name not in checked_out:
            guests.write(name + "\n")


with open("guests.txt") as guests:
    for line in guests:
        print(line)
		

-------------------------------------------------------------------
checking 


guests_to_check = ['Bob', 'Andrea']
checked_in = []

with open("guests.txt","r") as guests:
    for g in guests:
        checked_in.append(g.strip())
    for check in guests_to_check:
        if check in checked_in:
            print("{} is checked in".format(check))
        else:
            print("{} is not checked in".format(check))
			
--------------------------------------------------------------------













